<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 4.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cd.oa.dao.DepartmentDao">

    <!--配置实体类属性与表字段的映射关系,结果集-->
    <resultMap id="department" type="Department">
        <!--主键字段用id配置,非主键字段用result配置 【property:实体类属性名,column:表字段名】-->
        <id property="id" column="id" javaType="String"/>
        <result property="name" column="name" javaType="String"/>
        <result property="address" column="address" javaType="String"/>
    </resultMap>

    <!-- id名必须与dao接口中的对应的方法名一致,这样生产对象的时候才能将sql语句和dao接口对应的方法关联起来 -->
    <insert id="insert" parameterType="Department">
        <!-- 注意：这里的名字是实体类的属性名,而不是表的字段名 -->
        insert into department values(#{id},#{name},#{address})
    </insert>

    <update id="update" parameterType="Department">
        <!-- name=#{name}表示:字段名=属性名 -->
        update department set name=#{name},address=#{address} where id=#{id}
    </update>

    <delete id="delete" parameterType="String">
        delete from department where id=#{id}
    </delete>

    <!--select标签需要配置resultMap属性,注意这个属性中不能直接使用pojo实体类,
        因为实体类的属性名和表的字段名不一定一样的,所以需要我们额外配置一个resultMap标签,
        用来将每一个属性和每一个属性进行匹配-->
    <select id="select" parameterType="String" resultMap="department">
        select * from department where id=#{id}
    </select>

    <select id="selectAll" resultMap="department">
        select * from department
    </select>

</mapper>